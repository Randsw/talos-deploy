    - name: List all VMs
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - name: Get IP address of VMs
      ansible.builtin.shell: virsh domifaddr {{ vms }} | awk 'NR==1{next}{print $4}' | awk 'NF > 0'
      loop: "{{ all_vms.list_vms }}"
      loop_control:
        loop_var: vms
      register: vms_ip

    - name: Create dict with vm names and addresses. Remove CIDR
      set_fact:
        vms_info: "{{ vms_info | default({}) | combine ({ vms.vms : vms.stdout[:-3] })}}"
      loop: "{{ vms_ip.results }}"
      loop_control:
        loop_var: vms

    - name: Generate machine config
      ansible.builtin.command: talosctl gen config my-cluster https://{{ K8s_API_VIP }}:6443 --install-disk /dev/vda
      when: not install_cillium

    - name: Generate machine config and skip CNI installation
      ansible.builtin.command: talosctl gen config my-cluster https://{{ K8s_API_VIP }}:6443 --install-disk /dev/vda --config-patch '[{"op"{{':'}} "add", "path"{{':'}} "/cluster/network/cni", "value"{{':'}} {"name"{{':'}} "none"}}]'
      when: install_cillium 

    - name: Add the virtual IP you picked to a network interface
      ansible.builtin.blockinfile:
        path: controlplane.yaml  
        insertafter: '    network: {}'
        block: |2
                  interfaces:
                    - interface: eth0
                      dhcp: true
                      vip:
                        ip: 192.168.121.100'
    - name: Make network dict not empty
      ansible.builtin.lineinfile:
        path: controlplane.yaml  
        search_string: '    network: {}'
        line: '    network:'

    # - name: Apply the configuration to the initial control plane node
    #   ansible.builtin.command: talosctl -n {{ item.value }} apply-config --insecure --file controlplane.yaml
    #   loop: "{{ vms_info | dict2items }}"
    #   when: '"talos_control-plane-node-1" in item.key'

    - name: Create string with vms ips
      set_fact:
        ip_string: "{{ vms_info.values() | list | join(' ')}}"

    - name: Generated talosconfig and configure its endpoints
      ansible.builtin.shell: export TALOSCONFIG=$(realpath ./talosconfig) && talosctl config endpoint {{ ip_string }}

    # - name: Bootstrap cluster
    #   ansible.builtin.command: talosctl -n {{ item.value }} bootstrap
    #   loop: "{{ vms_info | dict2items }}"
    #   when: '"talos_control-plane-node-1" in item.key'

    # - name: Apply the machine configurations to the control nodes
    #   ansible.builtin.command: talosctl -n {{ item.value}} apply-config --insecure --file controlplane.yaml
    #   loop: "{{ vms_info | dict2items }}"
    #   when: '"control" in item.key'

    # - name: Apply the machine configurations to the worker nodes
    #   ansible.builtin.command: talosctl -n {{ item.value}} apply-config --insecure --file worker.yaml
    #   loop: "{{ vms_info | dict2items }}"
    #   when: '"worker" in item.key'

    - name: Install Cilium if needed
      ansible.builtin.include_tasks: "cilium.yaml"
      when: install_cillium | bool